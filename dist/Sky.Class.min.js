(function(name,global,factory){if(typeof define==="function"&&define.amd)define(factory);else if(typeof module==="object")module.exports=factory();else global[name]=global[name]||factory()})("Class",this,function(){function Class(){return Class.extend.apply(Class,arguments)}Class.prototype.__proto__=Function.prototype;var mergeSingleProperty=function(target,propName,source){var descriptor=Object.getOwnPropertyDescriptor(source,propName);if(descriptor&&descriptor.enumerable){descriptor.configurable=descriptor.writable=true;Object.defineProperty(target,propName,descriptor)}};var mergeProperties=function privateMerge(derived,mixin,_flags){var mixinIsFunction=typeof mixin==="function";var protoProps=(mixinIsFunction?mixin.prototype:mixin)||{};Object.getOwnPropertyNames(protoProps).forEach(function(pName){if(pName==="initialize"&&mixinIsFunction)return true;if(typeof protoProps[pName]!=="function")return true;if(Object.getOwnPropertyDescriptor(_flags,pName))return true;mergeSingleProperty(derived.prototype,pName,protoProps);_flags[pName]=true})};var runParentInitializers=function(thisInstance,thisClass,args){var allParentClasses=thisClass._parents||[];allParentClasses.forEach(function(tempParentClass){tempParentClass.prototype.initialize.apply(thisInstance,args)})};var getAllParents=function getParentClasses(theParentClass){var allParentClasses=[];for(;theParentClass;theParentClass=theParentClass._parent)allParentClasses.push(theParentClass);return allParentClasses.reverse()};var defaultClassInitializer=function defaultClassInitializer(){};Class.extend=function(parentClass){var childClass=function childClassConstructor(){var childInstance=Object.create(childClass.prototype);runParentInitializers(childInstance,childClass,arguments);childClass.prototype.initialize.apply(childInstance,arguments);return childInstance};if(typeof parentClass==="function"){if(!(parentClass instanceof Class))throw new Error("Only support Classes as parent Classes!");childClass.prototype=Object.create(parentClass.prototype);childClass._parents=Object.freeze(getAllParents(parentClass));childClass._parent=Object.freeze(parentClass)}childClass.prototype.initialize=defaultClassInitializer;for(var _flags={},idx=arguments.length-1;idx>=0;--idx)mergeProperties(childClass,arguments[idx],_flags);childClass.__proto__=Object.freeze(Class.prototype);return childClass=Object.freeze(childClass)};return Object.freeze(Class)});